#include<bits/stdc++.h>
using namespace std;

void bfsSearch(vector<vector<int>> &graph, vector<bool> &visited, 
queue<int> &q)
{
    if(q.empty())
        return;
    int v = q.front();
    q.pop();
    for(auto i:graph[v])
    {
        if(!visited[i])
        {
            visited[i]=true;
            q.push(i);
        }
    }
    bfsSearch(graph,visited,q);
}

void bfs(vector<vector<int>> &graph, vector<bool> &visited)
{
    queue<int> q;
    q.push(0);
    visited[0] = true;
    bfsSearch(graph,visited,q);
}

void bfs2 (vector<vector<int>> &graph, vector<int> &ans2)
{
    for(int i=1; i<graph.size(); i++)
    {
        vector<bool> visited(graph.size(),false);
        queue<int> q;
        q.push(i);
        bfsSearch(graph,visited,q);
        if(visited[0]==false)
            ans2.push_back(i);
    }
}

int main()
{
    int n,x,y;
    cin>>n;
    vector<vector<int>> graph(n);
    for(int i=0; i<n; i++)
    {
        cin>>x;
        while(1)
        {
            cin>>y;
            if(y==-1)
                break;
            graph[x].push_back(y);
        }
    }
    vector<bool> visited(n,false);
    vector<int> ans;
    bfs(graph,visited);
    for(int i=0; i<n; i++)
    {
        if(visited[i]==false)
            ans.push_back(i);
        else
            visited[i]=false;
    }
    sort(ans.begin(),ans.end());
    for(int i=0; i<ans.size(); i++)
        cout<<ans[i]<<" ";
    cout<<"\n";
    vector<int> ans2;
    bfs2(graph,ans2);
    sort(ans2.begin(), ans2.end());
    for(int i=0; i<ans2.size(); i++)
        cout<<ans2[i]<<" ";
}