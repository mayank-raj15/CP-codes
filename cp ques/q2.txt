#include<bits/stdc++.h>
using namespace std;
vector<int>paths;
void DFS(int vertex, vector<vector<int>> adj_list, vector<bool> &visited,int k)
{
    //cout << vertex << ","<<k<<" ";
    visited[vertex] = true;
    int flag=1;
    for (int i=0;i<adj_list[vertex].size();i++)
    {
        if (!visited[adj_list[vertex][i]])
        {
            flag=0;
            DFS(adj_list[vertex][i], adj_list, visited,k+1);
        }
    }
    if(flag==1)
        paths.push_back(k);
}
int main()
{
    int n, source, destination,i;
    int tot_path=0;
    cin >> n;
    vector<int>ind(n+1,0);
    vector<vector<int>> adj_list(n + 1);
    for (int i = 0; i < n; i++)
    {
        cin >> source;
        while (1)
        {
            cin >> destination;
            if (destination == -1)
                break;
            adj_list[source].push_back(destination);
            ind[destination]+=1;
        }
    }
    for(i=1;i<=n;i++)
        tot_path+=adj_list[i].size();
    tot_path/=2;
    int maxm=*max_element(ind.begin(),ind.end());
    for(i=1;i<=n;i++)
        if(maxm==ind[i])
            break;
    vector<bool> visited(n + 1, false);
    DFS(i, adj_list, visited,0);
    sort(paths.begin(),paths.end());
    int lp=paths[paths.size()-1];
    int sp=paths[paths.size()-2];
    int l=lp+sp;
    //cout<<endl;
    // for(int i=0; i<paths.size(); i++)
    //     cout<<paths[i]<<" ";
    //cout<<tot_path;
    cout<<(l+(tot_path-l)*2);
    return 0;
}