#include <iostream>
using namespace std;
typedef long long int ll;

struct Queue
{
    int size, front, rear, capacity;
    ll* array;
};

Queue* createQueue(int n)
{
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->front = -1;
    queue->rear = 0;
    queue->size = 0;
    queue->capacity = n;
    queue->array = (ll*)malloc(sizeof(ll)*queue->capacity);
    return queue;
}

int isEmpty(Queue* queue)
{
    return queue->size==0;
}

int isFull(Queue* queue)
{
    return queue->size==queue->capacity;
}

void enqueue(Queue* queue, ll data)
{
    if(isFull(queue))
        return;
    queue->front = (queue->front+1)%queue->capacity;
    queue->array[queue->front] = data;
    queue->size++;
}

ll dequeue(Queue* queue)
{
    if(isEmpty(queue))
        return -1;
    ll value = queue->array[queue->rear];
    queue->rear = (queue->rear+1)%queue->capacity;
    queue->size--;
    return value;
}

int main() {
    int n;
    cin>>n;
    Queue* queue = createQueue(n);
    ll temp;
    for(int i=0; i<n; i++)
    {
        cin>>temp;
        enqueue(queue, temp);
    }
    for(int i=0; i<n; i++)
        cout<<dequeue(queue)<<" ";
    return 0;
}
