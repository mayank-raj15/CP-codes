#include <iostream>
using namespace std;
typedef long long int ll;

void minHeapify(ll a[], int i,int n)
{
    int left = 2*i, right = 2*i+1, smallest=i;
    if(left<=n && a[left]<a[i])
        smallest = left;
    if(right<=n && a[right]<a[smallest])
        smallest = right;
    if(smallest!=i)
    {
        swap(a[i],a[smallest]);
        minHeapify(a,smallest,n);
    }
}

void buildMinHeap(ll a[], int n)
{
    for(int i=n/2; i>=1; i--)
    {
        minHeapify(a,i,n);
    }
}

void bottomUpMinHeapify(ll a[], int n)
{
    int index = n;
    while(index>1 && a[index/2]>a[index])
    {
        swap(a[index/2], a[index]);
        index = index/2;
    }
}

void insert(ll a[], ll data, int* n)
{
    *n = *n+1;
    a[*n] = data;
    bottomUpMinHeapify(a,*n);
}

ll extractMin(ll a[], int* n)
{
    ll min = a[1];
    swap(a[1],a[*n]);
    *n = *n-1;
    minHeapify(a,1,*n);
    return min;
}

int main() {
    int n;
    cin>>n;
    ll a[n];
    ll data;
    for(int i=1; i<=n; i++)
        cin>>a[i];
    buildMinHeap(a,n);
    for(int i=1; i<=n; i++)
        cout<<a[i]<<" ";
    cout<<endl;
    cout<<"Min: "<<extractMin(a,&n)<<endl;
    for(int i=1; i<=n; i++)
        cout<<a[i]<<" ";
    cout<<endl;
    cin>>data;
    insert(a,data,&n);
    for(int i=1; i<=n; i++)
        cout<<a[i]<<" ";
    return 0;
}
