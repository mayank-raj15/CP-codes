#include <iostream>
using namespace std;
typedef long long int ll;

void maxHeapify(ll a[], int i,int n)
{
    int left = 2*i, right = 2*i+1, largest=i;
    if(left<=n && a[left]>a[i])
        largest = left;
    if(right<=n && a[right]>a[largest])
        largest = right;
    if(largest!=i)
    {
        swap(a[i],a[largest]);
        maxHeapify(a,largest,n);
    }
}

void buildMaxHeap(ll a[], int n)
{
    for(int i=n/2; i>=1; i--)
    {
        maxHeapify(a,i,n);
    }
}

void bottomUpMaxHeapify(ll a[], int n)
{
    int index = n;
    while(index>1 && a[index/2]<a[index])
    {
        swap(a[index/2], a[index]);
        index = index/2;
    }
}

void insert(ll a[], ll data, int* n)
{
    *n = *n+1;
    a[*n] = data;
    bottomUpMaxHeapify(a,*n);
}

ll extractMax(ll a[], int* n)
{
    ll max = a[1];
    swap(a[1],a[*n]);
    *n = *n-1;
    maxHeapify(a,1,*n);
    return max;
}

void heapSort(ll a[], int n)
{
    buildMaxHeap(a,n);
    for(int i=n; i>=2; i--)
    {
        swap(a[i],a[1]);
        n = n-1;
        maxHeapify(a,1,n);
    }
}

int main() {
    int n;
    cin>>n;
    ll a[n];
    ll data;
    for(int i=1; i<=n; i++)
        cin>>a[i];
    heapSort(a,n);
    for(int i=1; i<=n; i++)
        cout<<a[i]<<" ";
    return 0;
}
