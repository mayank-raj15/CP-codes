#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

bool isOdd(int n)
{
    return n%2==1;
}

bool isDivisibleBy10(int n)
{
    return n%10==0;
}

void showVector(vector<int> v)
{
    auto itr = v.begin();
    while(itr!=v.end())
    {
        cout<<*itr<<" ";
        itr++;
    }
    cout<<"\n";
}

int remain3(int n)
{
    return n%3;
}

int addThem(int i, int j)
{
    return i+j;
}

bool isEqual(int i, int j)
{
    return i==j;
}

int main() {
    vector<int> example = {8,5,1,9,5,4,6};
    cout<<*min_element(example.begin(), example.end())<<"\n";
    cout<<*max_element(example.begin(), example.end())<<"\n";
    cout<<any_of(example.begin(), example.end(), isOdd)<<"\n";  //returns 1 if any of the element in the given range satisfies the condition in the predicate function
    cout<<none_of(example.begin(), example.end(), isDivisibleBy10)<<"\n";   //returns 1 if none of the element satisfies the condition given in the predicate function
    auto itr = find(example.begin(), example.end(), 7);     //returns the iterator to the first occurence of the element with given value, and if not found returns the last element in the range
    if(itr!=example.end())
        cout<<"7 exists\n";
    cout<<count(example.begin(), example.end(), 5)<<"\n";   //it returns the no. of element with the given value
    cout<<count_if(example.begin(), example.end(), isOdd)<<"\n";    //it returns the no. of elements that satisfy the condition in the predicate function
    
    vector<int> v(10);
    copy(example.begin(), example.end(), v.begin());    //copies the range to the positions starting from the passed position
    showVector(v);
    copy_n(example.begin(), 3, v.begin()+7);        //copies n elements starting from passed position of the array to be copied and copies it to the positions starting from the passed positions
    showVector(v);
    vector<int> oddArray(10);
    copy_if(example.begin(), example.end(), oddArray.begin(), isOdd);   //copies the elements from the given range to positions starting from the given positions only if the elements satisfy the conditions in the predicate function
    showVector(oddArray);
    fill(oddArray.begin()+4, oddArray.end(), 1);    //fills the range of all the elements with the passed value
    showVector(oddArray);
    vector<int> allones(5);
    fill_n(allones.begin(), 4, 1);      //fills first n positions with the given value
    showVector(allones);
    swap(v,allones);        //constant time for non-array elements and linear time for array elements
    showVector(allones);
    auto itr1 = allones.begin();
    auto itr2 = v.begin();
    cout<<*itr1<<" "<<*itr2<<"\n";
    iter_swap(itr1, itr2);      //it swaps the values of the elements, the iterators are pointing to
    cout<<*itr1<<" "<<*itr2<<"\n";
    transform(allones.begin(), allones.end(), allones.begin(), remain3);    //it changes the value of each element in the range according to the given function and adds it the locations starting from the given positon, 
    showVector(allones);
    transform(allones.begin(), allones.end(), oddArray.begin(), allones.begin(), addThem);      //it takes two elements one from each range, makes a pair and performs the given operation and saves the value to the positons starting from the 4th argument
    showVector(allones);
    replace(allones.begin(), allones.end(), 3, 4);  //it replaces all the elements of the given old value to a given new value
    showVector(allones);
    replace_if(allones.begin(), allones.end(), isOdd, 0);   //it replaces the value of the elements which satisfy the condition with the new value that is provided
    showVector(allones);
    vector<int> vnew = {1,2,3,4,5,6,7,8,9,10};
    
    cout<<*upper_bound(vnew.begin(), vnew.end(), 7)<<'\n';  //it returns the iterator of the first element that is greater than value
    cout<<*lower_bound(vnew.begin(), vnew.end(), 7)<<'\n';  //it returns the iterator of the first element that is greater or equal to the value
    /* for the above functions, a specific type of range can only be used,
    where elements less than the given value should lie before that element
    and elements less than the value should lie after that element*/
    /*otherwise the behaviour of the function will be undefined*/
    
    reverse(vnew.begin(), vnew.end());      //it reverses the order of the elements in the given range
    showVector(vnew);
    unique(allones.begin(), allones.end(), isEqual);    //it removes all the consecutive equal elements except the first occurence using the predicate function that returns true if two elements are equal
    showVector(allones);        
    auto it = remove(allones.begin(), allones.end(), 4);    //it removes all the occurences of the given element and points the iterator to the last element which equals to the value as that element gets there because of shifting, so we need to erase elements starting from that iterator till the end
    allones.erase(it, allones.end());
    showVector(allones);
    // auto it2 = remove(allones.begin(), allones.end(), isOdd);    //it removes all the occurences of the given element that satisfy the condition in the predicate function
    // allones.erase(it2, allones.end());
    // showVector(allones);
    
    vector<int> sorted1 = {1,3,5,7,8,10};
    vector<int> sorted2 = {2,3,4,6,8,9};
    vector<int> sortedFinal(12);
    
    merge(sorted1.begin(),sorted1.end(), sorted2.begin(), sorted2.end(), sortedFinal.begin());
    //this function mergest two sorted ranges of elements and stores the final sorted range into the postion provided
    showVector(sortedFinal);
    vector<int> sortednew(12);
    copy(sorted1.begin(),sorted1.end(),sortednew.begin());
    copy(sorted2.begin(),sorted2.end(),sortednew.begin()+6);
    inplace_merge(sortednew.begin(), sortednew.begin()+6, sortednew.end());     //it is used to merge two consecutive sorted ranges of elements into one final sorted range
    showVector(sortednew);
    vector<int> per = {3,1,2};
    do
    {
        cout<<per[0]<<" "<<per[1]<<" "<<per[2]<<"\n";
    } while(next_permutation(per.begin(), per.end()));  //this loop will run until the function is able to create a new lexicographically greater permutation, if it fails to create a new permutation, condition will be false and order of elements will return back to the order in which they started
    cout<<per[0]<<" "<<per[1]<<" "<<per[2]<<"\n";
    per = {3,2,1};
    do
    {
        cout<<per[0]<<" "<<per[1]<<" "<<per[2]<<"\n";
    } while(prev_permutation(per.begin(), per.end()));  //this loop will run until the function is able to create a new lexicographically smaller permutation, if it fails to create a new permutation, condition will be false and order of elements will return back to the order in which they started
    cout<<per[0]<<" "<<per[1]<<" "<<per[2]<<"\n";
    
    vector<int> nth = {8,5,9,3,5,1,9,4,6,7,2};
    nth_element(nth.begin(), nth.begin()+5, nth.end()); //it makes sure that the nth smallest element is present at the same position as it will be present in a sorted array, here for getting n=4, we used nth.begin()+5
    //we can also pass a comparator function and get nth largest element
    showVector(nth);
    return 0;
}




