#include <iostream>
using namespace std;
typedef long long int ll;

//Lomuto's Partitioning Algorithm

int partition(ll a[], int lo, int hi)
{
    int i = lo-1, j = lo, pivot = a[hi];    //rightmost element as pivot
    
    while(j<hi)
    {
        if(a[j]<pivot)          //if element is less than pivot, replace it with elements greater than pivot
        {
            i++;
            swap(a[i],a[j]);
        }
        j++;
    }
    i++;
    swap(a[i],a[hi]);       //finally replacing the pivot with the next greater element
    return i;
}

void quickSort(ll a[], int lo, int hi)
{
    if(lo<hi)
    {
        int partIndex = partition(a,lo,hi);     //calling partition function for getting pivot index
        quickSort(a,lo,partIndex-1);        //since pivot is already sorted, we skip the pivot index during the recursion call
        quickSort(a,partIndex+1,hi);
    }
}

int main() {
    int n;
    cin>>n;
    ll a[n];
    for(int i=0; i<n; i++)
        cin>>a[i];
    quickSort(a,0,n-1);
    for(int i=0; i<n; i++)
        cout<<a[i]<<" ";
    return 0;
}
